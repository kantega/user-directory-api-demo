AWSTemplateFormatVersion: "2010-09-09"
Description: 'Describes the Fargate deployment of the User Directory API'

Outputs:
    ALBURL:
        Description: URL of the ALB
        Value: !Join
            - ''
            - - 'http://'
              - !GetAtt ALB.DNSName
Parameters:
    UserDirApiImage:
        Default: '535376556962.dkr.ecr.eu-west-1.amazonaws.com/user-dir-api:latest'
        Description: 'The api image to run (default :latest)'
        Type: String
Resources:
    ECSCluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            ClusterName: Fargate

    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsHostnames: 'true'
            EnableDnsSupport: 'true'
    PubSubnetAz1:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
            CidrBlock: 10.0.0.0/24
            VpcId: !Ref VPC

    PrivSubnetAz1:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
            CidrBlock: 10.0.1.0/24
            VpcId: !Ref VPC


#        TODO: Re-arrange the items below
    ALB:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            Scheme: internet-facing
            SecurityGroups:
            - !Ref ALBSecurityGroup
            Subnets:
            - !Ref PubSubnetAz1
            - !Ref PrivSubnetAz1
    ALBListener:
        Properties:
            DefaultActions:
                - TargetGroupArn: !Ref ALBTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref ALB
            Port: '80'
            Protocol: HTTP
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
    ALBSecurityGroup:
        Properties:
            GroupDescription: ALB Security Group
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: '80'
                  IpProtocol: tcp
                  ToPort: '80'
            VpcId: !Ref VPC
        Type: 'AWS::EC2::SecurityGroup'
    ALBTargetGroup:
        Properties:
            HealthCheckIntervalSeconds: '30'
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: '10'
            HealthyThresholdCount: '4'
            Matcher:
                HttpCode: '200'
            Port: 80
            Protocol: HTTP
            TargetType: ip
            UnhealthyThresholdCount: '3'
            VpcId: !Ref VPC
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    AttachGateway:
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
        Type: 'AWS::EC2::VPCGatewayAttachment'
    CWLogGroup:
        Type: 'AWS::Logs::LogGroup'
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
    PubSubnet1RouteTableAssociation:
        Properties:
            RouteTableId: !Ref RouteViaIgw
            SubnetId: !Ref PubSubnetAz1
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
    PubSubnet2RouteTableAssociation:
        Properties:
            RouteTableId: !Ref RouteViaIgw
            SubnetId: !Ref PrivSubnetAz1
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
    PublicRouteViaIgw:
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref RouteViaIgw
        Type: 'AWS::EC2::Route'
    RouteViaIgw:
        Properties:
            VpcId: !Ref VPC
        Type: 'AWS::EC2::RouteTable'
    Service:
        DependsOn: ALBListener
        Properties:
            Cluster: !Ref ECSCluster
            DesiredCount: 1
            LaunchType: FARGATE
            LoadBalancers:
                - ContainerName: nginx
                  ContainerPort: 80
                  TargetGroupArn: !Ref ALBTargetGroup
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref TaskSecurityGroup
                    Subnets:
                        - !Ref PubSubnetAz1
                        - !Ref PrivSubnetAz1
            TaskDefinition: !Ref TaskDefinition
        Type: 'AWS::ECS::Service'
    TaskDefinition:
        DependsOn: TaskExecutionPolicy
        Properties:
            ContainerDefinitions:
                - Essential: 'true'
                  Image: !Ref UserDirApiImage
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref CWLogGroup
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: nginx
                  Name: nginx
                  PortMappings:
                      - ContainerPort: 80
            Cpu: '512'
            ExecutionRoleArn: !GetAtt
                - TaskExecutionRole
                - Arn
            Memory: 1GB
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
        Type: 'AWS::ECS::TaskDefinition'
    TaskExecutionPolicy:
        Properties:
            PolicyDocument:
                Statement:
                    - Action:
                          - 'ecr:GetAuthorizationToken'
                          - 'ecr:BatchCheckLayerAvailability'
                          - 'ecr:GetDownloadUrlForLayer'
                          - 'ecr:BatchGetImage'
                          - 'logs:CreateLogStream'
                          - 'logs:PutLogEvents'
                      Effect: Allow
                      Resource:
                          - '*'
                Version: 2012-10-17
            PolicyName: fargate-execution
            Roles:
                - !Ref TaskExecutionRole
        Type: 'AWS::IAM::Policy'
    TaskExecutionRole:
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - 'sts:AssumeRole'
                      Effect: Allow
                      Principal:
                          Service:
                              - ecs-tasks.amazonaws.com
        Type: 'AWS::IAM::Role'
    TaskSecurityGroup:
        Properties:
            GroupDescription: Task Security Group
            SecurityGroupIngress:
                - FromPort: '80'
                  IpProtocol: tcp
                  SourceSecurityGroupId: !GetAtt
                      - ALBSecurityGroup
                      - GroupId
                  ToPort: '80'
            VpcId: !Ref VPC
        Type: 'AWS::EC2::SecurityGroup'
